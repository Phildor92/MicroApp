// <auto-generated />
using MicroApp.Data.Recipes.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroApp.Data.Migrations
{
    [DbContext(typeof(RecipeDbContext))]
    [Migration("20250301090059_Squash")]
    partial class Squash
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Descriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.ToTable("Descriptor");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomQuantity")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<int?>("IngredientQuantityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IngredientQuantityId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Keyword");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Range", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinAmount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Range");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ServingsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TemperatureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServingsId");

                    b.HasIndex("TemperatureId");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Step");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Descriptor", b =>
                {
                    b.HasOne("MicroApp.Data.Recipes.Models.Ingredient", null)
                        .WithMany("Descriptors")
                        .HasForeignKey("IngredientId");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Ingredient", b =>
                {
                    b.HasOne("MicroApp.Data.Recipes.Models.Measurement", "IngredientQuantity")
                        .WithMany()
                        .HasForeignKey("IngredientQuantityId");

                    b.HasOne("MicroApp.Data.Recipes.Models.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId");

                    b.Navigation("IngredientQuantity");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Keyword", b =>
                {
                    b.HasOne("MicroApp.Data.Recipes.Models.Recipe", null)
                        .WithMany("Keywords")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Measurement", b =>
                {
                    b.HasOne("MicroApp.Data.Recipes.Models.Recipe", null)
                        .WithMany("Durations")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Recipe", b =>
                {
                    b.HasOne("MicroApp.Data.Recipes.Models.Range", "Servings")
                        .WithMany()
                        .HasForeignKey("ServingsId");

                    b.HasOne("MicroApp.Data.Recipes.Models.Measurement", "Temperature")
                        .WithMany()
                        .HasForeignKey("TemperatureId");

                    b.Navigation("Servings");

                    b.Navigation("Temperature");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Step", b =>
                {
                    b.HasOne("MicroApp.Data.Recipes.Models.Recipe", null)
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Ingredient", b =>
                {
                    b.Navigation("Descriptors");
                });

            modelBuilder.Entity("MicroApp.Data.Recipes.Models.Recipe", b =>
                {
                    b.Navigation("Durations");

                    b.Navigation("Ingredients");

                    b.Navigation("Keywords");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
